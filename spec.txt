* USER INTERFACE
** VIEW: AVAILABLE RETREATS 
-Allow the user to choose from retreats accepting registrations (maybe show number of sign-ups / people on waiting list? Maybe not, as people might underestimate the number of cancellations and not bother signing up if there's a long waiting list?)

-Choosing a retreat leads to RETREAT SIGN-UP

** VIEW: RETREAT SIGN-UP

- Sign-up form. (Do we need some kind of captcha?)
- (Backend: Once a valid form has been submitted, send a verification email.)
- (Backend: once email has been verified, email the user a URL that they can use to cancel their registration.)

* ADMIN INTERFACE

** Access levels
-manager: sees all data (for a single retreat?); can give access to other users
-admin: can create new retreats and user accounts

** VIEW: AVAILABLE RETREATS
-Like the view in the user interface, but show only the retreats that this user account has access to (probably one retreat for most users); also maybe show some information about the retreat, like number of registrations (paid / unpaid) and length of waiting list

-Also has a 'create new retreat' button that leads to CREATE RETREAT VIEW

-Choosing an existing retreat leads to RETREAT VIEW

** VIEW: CREATE RETREAT

-"important info" box from RETREAT VIEW

-sign-up form design tool (maybe with some existing templates)

** VIEW: RETREAT
-Some kind of tabbed interface for choosing the subview. Most of the day-to-day tasks should be in the MAIN subview, with rarely used or potentially 'dangerous' (perform irrevokable side effects like deleting data or emailing users) tasks relegated to other subviews. 

***TAB: MAIN (default)

-"important info" box: retreat dates, deadlines(?), maximum number of participants (default: 1?), maximum length of waiting list (default: 0?), registration closed/open (default: closed); who has access to the data(?)
-- maybe have all of these editable in this view, implemented as some kind of 'editableProperty' component that shows a value with a small 'edit' button/link next to it; clicking on 'edit' lets the user enter a new value and clicking 'save' sends the info to the server

-List of registered yogis: name, email address and a checkbox for payment status (payment status obviously needs to be checked manually by the retreat manager); link to YOGI DETAILS (posted from the sign-up form)
--"EXPORT DATA" button that leads to EXPORT DATA TAB

-MAYBE: Send an email to every yogi (I'm not sure if implementing this in the web interface is really worth it; maybe you could just have a button for putting all the email addresses onto the clipboard in a format that you can just paste into a BCC field in your favorite email client)

-ADMIN ONLY: remove retreat - destroys all related info in the database, irrevokable

*** TAB: YOGI DETAILS
-A single yogi's sign-up form
-CANCEL REGISTRATION button - in case we need to manually cancel someone's registration (they lost their link or something)
-I suspect that this view probably won't be used that often, but it's good to have it there anyway

*** TAB: EXPORT DATA
-One checkbox for each field in the sign-up form
-List of registrants?
-Select/deselect all buttons
-Idea: you can export everything (for the teacher) or just the dietary restrictions (for the cooks) or just the email addresses (for post-retreat contact information exchange)

*** TAB: AUTOMATIC EMAIL REMINDERS
-Send reminders (default: yes)
-Editable templates for the reminder emails, with reasonable defaults (probably most retreats won't touch these)
-Templates: "you signed up to the retreat; please pay"; "we have received your payment and hereby confirm your registration"; "you are now on the waiting list";


* BACKEND

-When the retreat is fully booked and someone cancels their registration, the backend should 'promote' the first person on the waiting list to the list of registrants and automatically email them about it using the relevant template.

-Three lists: signed up, unpaid; registrants (signed up + paid); waiting list

-When someone cancels, maybe we should just mark them as 'cancelled' instead of deleting the row. That way we could revert the cancellation if someone cancels by accident (shouldn't happen of course, but there is virtually no cost to guarding against it)
